{"version":3,"sources":["components/appHeader/index.js","components/appHeader/AppHeader.js","components/itemAddForm/index.js","components/itemAddForm/ItemAddForm.js","components/todoListItem/TodoListItem.js","components/todoList/index.js","components/todoList/TodoList.js","services/TodoService.js","App.js","index.js"],"names":["AppHeader","toDo","done","className","ItemAddForm","this","props","valueForm","onLabelChangeNew","onSubmit","type","onChange","placeholder","value","Component","TodoListItem","onLabelClick","setState","onMarkImportant","important","label","onDeleted","onToggleDone","onToggleImportant","onEdit","onClick","TodoList","todos","handleOnDragEnd","elements","map","item","index","id","itemProps","draggableId","String","provided","ref","innerRef","draggableProps","dragHandleProps","onDragEnd","droppableId","droppableProps","TodoService","fetch","then","result","json","slice","getOptions","title","App","todoService","maxId","state","error","isLoaded","todoData","isEditing","deleteItem","filter","addItem","text","newItem","toggleProperty","idx","findIndex","oldItem","e","target","preventDefault","editElement","find","newElement","newArray","idElement","splice","destination","newArr","Array","from","source","reorderedItem","getTodos","arr","propName","message","doneCount","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d40641f.chunk.js","sourcesContent":["import AppHeader from './AppHeader'\r\n\r\nexport default AppHeader","import React from 'react'\r\nimport './AppHeader.css'\r\n\r\nconst AppHeader = ({ toDo, done }) => {\r\n    return (\r\n        <div className=\"app-header d-flex\">\r\n            <h1>Todo List</h1>\r\n            <h2>{toDo} more to do, {done} done</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppHeader","import ItemAddForm from './ItemAddForm'\r\n\r\nexport default ItemAddForm","import React, { Component } from 'react'\r\nimport './ItemAddForm.css'\r\n\r\n\r\nexport default class ItemAddForm extends Component {\r\n\r\n    render() {\r\n        const { valueForm, onLabelChangeNew, onSubmit } = this.props\r\n        return (\r\n            <form className=\"item-add-form d-flex\"\r\n                onSubmit={onSubmit}>\r\n\r\n                <input type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={onLabelChangeNew}\r\n                    placeholder=\"What needs to be done\"\r\n                    value={valueForm} />\r\n\r\n                <button\r\n                    className=\"btn btn-outline-secondary\">\r\n                    Add\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './TodoListItem.css'\r\n\r\nexport default class TodoListItem extends Component {\r\n\r\n    onLabelClick = () => {\r\n        return this.setState(({ done }) => {\r\n            return {\r\n                done: !done\r\n            }\r\n        })\r\n    }\r\n\r\n    onMarkImportant = () => {\r\n        return this.setState(({ important }) => {\r\n            return {\r\n                important: !important\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { label, onDeleted, onToggleDone, onToggleImportant, important, done, onEdit } = this.props\r\n        let className = 'todo-list-item'\r\n\r\n        if (important) {\r\n            className += ' important';\r\n        }\r\n\r\n        if (done) {\r\n            className += ' done';\r\n        }\r\n\r\n        return (\r\n            <span className={className}>\r\n                <span\r\n                    className=\"todo-list-item-label\"\r\n                    onClick={onToggleDone}>\r\n                    {label}\r\n                </span>\r\n\r\n                <button type=\"button\"\r\n                    className=\"btn btn-outline-success btn-sm float-right\"\r\n                    onClick={onToggleImportant}>\r\n                    <i className=\"fa fa-exclamation\" />\r\n                </button>\r\n\r\n                <button type=\"button\"\r\n                    className=\"btn btn-outline-danger btn-sm float-right\"\r\n                    onClick={onDeleted}>\r\n                    <i className=\"fa fa-trash-o\" />\r\n                </button>\r\n\r\n                <button type=\"button\"\r\n                    className=\"btn btn-outline-primary btn-sm float-right\"\r\n                    onClick={onEdit}>\r\n                    <i className=\"fa fa-edit small\" />\r\n                </button>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\n","import TodoList from './TodoList'\r\n\r\nexport default TodoList","import React, { useState } from 'react'\r\nimport TodoListItem from '../todoListItem/TodoListItem'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport './TodoList.css'\r\n\r\n\r\nconst TodoList = ({ todos, onDeleted, onToggleImportant, onToggleDone, onEdit, handleOnDragEnd }) => {\r\n    const elements = todos.map((item, index) => {\r\n        const { id, ...itemProps } = item\r\n\r\n        return (\r\n            <Draggable key={id} draggableId={String(id)} index={index}>\r\n                {(provided) => (\r\n                    <li className=\"list-group-item\"\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}>\r\n\r\n                        <TodoListItem\r\n                            {...itemProps}\r\n                            onDeleted={() => onDeleted(id)}\r\n                            onToggleImportant={() => { onToggleImportant(id) }}\r\n                            onToggleDone={() => { onToggleDone(id) }}\r\n                            onEdit={() => { onEdit(id) }}\r\n                        />\r\n                    </li>\r\n                )}\r\n            </Draggable>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n            <Droppable droppableId=\"characters\">\r\n                {(provided) => (\r\n                    <ul className=\"list-group todo-list\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                        {elements}\r\n                        {provided.placeholder}\r\n                    </ul>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    )\r\n}\r\nexport default TodoList","export default class TodoService {\r\n\r\n    getTodos() {\r\n        return (\r\n            fetch(\"https://jsonplaceholder.typicode.com/todos\")\r\n                .then(result => result.json())\r\n                .then(result => result.slice(0, 10))\r\n                .then(result => this.getOptions(result))\r\n        )\r\n    }\r\n\r\n    getOptions(result) {\r\n        return result.map(item => {\r\n            return {\r\n                label: item.title,\r\n                important: false,\r\n                done: false,\r\n                id: item.id,\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport AppHeader from './components/appHeader'\r\nimport ItemAddForm from './components/itemAddForm'\r\nimport TodoList from './components/todoList'\r\nimport TodoService from './services/TodoService'\r\nimport './App.css'\r\n\r\nexport default class App extends Component {\r\n\r\n    todoService = new TodoService()\r\n\r\n    componentDidMount() {\r\n        this.todoService.getTodos()\r\n            .then(\r\n                result => this.setState({\r\n                    isLoaded: true,\r\n                    todoData: result\r\n                }),\r\n                error => this.setState({\r\n                    isLoaded: true,\r\n                    error\r\n                })\r\n            )\r\n    }\r\n\r\n    maxId = 100\r\n\r\n    state = {\r\n        error: null,\r\n        isLoaded: false,\r\n        todoData: [],\r\n        valueForm: \"\",\r\n        isEditing: null,\r\n    }\r\n\r\n    deleteItem = id => {\r\n        this.setState(({ todoData }) => {\r\n            return {\r\n                todoData: todoData.filter(item => item.id !== id)\r\n            }\r\n        })\r\n    }\r\n\r\n    addItem = text => {\r\n        this.setState(({ todoData }) => {\r\n            const newItem = {\r\n                label: text,\r\n                id: this.maxId++,\r\n                important: false,\r\n                done: false\r\n            }\r\n            const newArray = [...todoData, newItem]\r\n\r\n            return {\r\n                todoData: newArray\r\n            }\r\n        })\r\n    }\r\n\r\n    toggleProperty(arr, id, propName) {\r\n        const idx = arr.findIndex(item => item.id === id)\r\n        const oldItem = arr[idx]\r\n        const newItem = { ...oldItem, [propName]: !oldItem[propName] }\r\n        const newArray = arr.slice()\r\n        newArray.splice(idx, 1, newItem)\r\n        return newArray\r\n\r\n    }\r\n\r\n    onToggleImportant = (id) => {\r\n        this.setState(({ todoData }) => {\r\n            return {\r\n                todoData: this.toggleProperty(todoData, id, 'important')\r\n            }\r\n        })\r\n    }\r\n\r\n    onToggleDone = (id) => {\r\n        this.setState(({ todoData }) => {\r\n            return {\r\n                todoData: this.toggleProperty(todoData, id, 'done')\r\n            }\r\n        })\r\n    }\r\n\r\n    onEdit = (id) => {\r\n        const { todoData } = this.state\r\n        const idx = todoData.findIndex(item => item.id === id)\r\n        const oldItem = todoData[idx]\r\n        this.setState({\r\n            valueForm: oldItem.label,\r\n            isEditing: id\r\n        })\r\n    }\r\n\r\n    onLabelChangeNew = (e) => {\r\n        this.setState({\r\n            valueForm: e.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (this.state.valueForm && !this.state.isEditing) {\r\n            this.addItem(this.state.valueForm)\r\n            this.setState({ valueForm: \"\" })\r\n        } else if (this.state.valueForm && this.state.isEditing) {\r\n            const { todoData } = this.state\r\n            const id = this.state.isEditing\r\n            const editElement = todoData.find(item => item.id === id)\r\n            const newElement = { ...editElement, label: this.state.valueForm }\r\n\r\n            this.setState(({ todoData }) => {\r\n                const newArray = [...todoData]\r\n                const idElement = newArray.findIndex(item => item.id === newElement.id)\r\n                newArray.splice(idElement, 1, newElement)\r\n                return {\r\n                    todoData: newArray,\r\n                    isEditing: null,\r\n                    valueForm: \"\"\r\n                }\r\n            })\r\n        } else return\r\n\r\n    }\r\n\r\n    handleOnDragEnd = result => {\r\n        if (!result.destination) return;\r\n        const newArr = Array.from(this.state.todoData);\r\n        const [reorderedItem] = newArr.splice(result.source.index, 1);\r\n        newArr.splice(result.destination.index, 0, reorderedItem);\r\n        this.setState(() => {\r\n            return {\r\n                todoData: newArr\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { todoData, valueForm, error, isLoaded } = this.state\r\n\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>\r\n        } else {\r\n            const doneCount = todoData.filter(item => item.done).length\r\n            const done = todoData.length - doneCount\r\n            return (\r\n                <div className=\"todo-app\">\r\n                    <AppHeader toDo={doneCount} done={done} />\r\n                    <div className=\"top-panel d-flex\">\r\n                        <ItemAddForm\r\n                            addItem={this.addItem}\r\n                            onLabelChangeNew={this.onLabelChangeNew}\r\n                            onSubmit={this.onSubmit}\r\n                            valueForm={valueForm} />\r\n                    </div>\r\n                    <TodoList\r\n                        todos={this.state.todoData}\r\n                        onDeleted={this.deleteItem}\r\n                        onToggleImportant={this.onToggleImportant}\r\n                        onToggleDone={this.onToggleDone}\r\n                        onEdit={this.onEdit}\r\n                        handleOnDragEnd={this.handleOnDragEnd}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />,\n  document.getElementById('root'))"],"sourceRoot":""}